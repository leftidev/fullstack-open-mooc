import { useUser } from './UserContext';
import { useEffect } from 'react';
import blogService from './services/blogs';
import loginService from './services/login';
import { useNotification } from './NotificationContext';

const useAuth = () => {
  const [user, dispatch] = useUser();
  const [, notify] = useNotification();

  useEffect(() => {
    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser');
    if (loggedUserJSON) {
      try {
        const user = JSON.parse(loggedUserJSON);
        if (user && user.token) {
          blogService.setToken(user.token); // Set token for API calls
          dispatch({ type: 'LOGIN', payload: user }); // Restore user session
          notify({
            type: 'SET_NOTIFICATION',
            payload: 'Session restored successfully',
          });
          setTimeout(() => notify({ type: 'CLEAR_NOTIFICATION' }), 5000);
        } else {
          throw new Error('Invalid user data');
        }
      } catch (error) {
        console.error('Failed to restore session:', error);
        notify({
          type: 'SET_NOTIFICATION',
          payload: 'Failed to restore session, please log in again',
        });
        setTimeout(() => notify({ type: 'CLEAR_NOTIFICATION' }), 5000);
        window.localStorage.removeItem('loggedNoteappUser'); // Clear invalid data
        dispatch({ type: 'LOGOUT' });
      }
    }
  }, [dispatch, notify]);

  const handleLogin = async (username, password) => {
    try {
      const user = await loginService.login({ username, password });
      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user));
      blogService.setToken(user.token);
      dispatch({ type: 'LOGIN', payload: user });
      notify({ type: 'SET_NOTIFICATION', payload: 'Logged in successfully' });
      setTimeout(() => notify({ type: 'CLEAR_NOTIFICATION' }), 5000);
    } catch {
      notify({ type: 'SET_NOTIFICATION', payload: 'Wrong credentials' });
      setTimeout(() => notify({ type: 'CLEAR_NOTIFICATION' }), 5000);
    }
  };

  const handleLogout = () => {
    window.localStorage.removeItem('loggedNoteappUser');
    dispatch({ type: 'LOGOUT' });
    notify({ type: 'SET_NOTIFICATION', payload: 'Logged out successfully' });
    setTimeout(() => notify({ type: 'CLEAR_NOTIFICATION' }), 5000);
  };

  return { user, handleLogin, handleLogout };
};

export default useAuth;
